# json_structure_template.py (혹은 코드 내부에 정의)

json_structure_template = {
  "description": "Schema for image analysis results including detected objects and faces.",
  "properties": {
    "image_name": {"type": "string", "description": "Original image file name."},
    "image_path": {"type": "string", "description": "Full path to the original image file."},
    "image_hash": {"type": "string", "description": "SHA256 hash of the original image file."},
    "image_width": {"type": "integer", "description": "Width of the original image in pixels."}, 
    "image_height": {"type": "integer", "description": "Height of the original image in pixels."},
    "detected_obj": {
      "type": "array",
      "description": "List of detected objects (e.g., persons) in the image.",
      "items": { # 각 객체 항목의 구조
        "type": "object",
        "properties": {
          "box_xyxy":   {"type": "array", "items": {"type": "number"}, "description": "Bounding box [x1, y1, x2, y2] of the detected object."},
          "box_xywh":   {"type": "array", "items": {"type": "number"}, "description": "Bounding box [x, y, w, h] of the detected object."},
          "confidence": {"type": "number", "description": "Confidence score of the object detection."},
          "class_id":   {"type": "integer", "description": "Class ID of the detected object."},
          "class_name": {"type": "string", "description": "Class name of the detected object (e.g., 'person')."},
          "detected_face_crop": { # 객체 내에서 감지된 얼굴들의 리스트
            "type": "array",
            "description": "List of detected faces within this object.",
            "items": { # 각 얼굴 항목의 구조 (여기에 임베딩 정보 등이 포함된다고 가정)
              "type": "object",
              "properties": {
                "bbox_xyxy":  {"type": "array", "items": {"type": "number"}, "description": "Bounding box [x1, y1, x2, y2] of the detected face crop."},
                "confidence": {"type": "number", "description": "Confidence score of the face detection."},
                "label":      {"type": "string", "description": "Label of the face (e.g., 'face')."},
                # 마루님 함수 설명 및 목표에 따라 추가된 부분
                "embedding":  {"type": "array", "items": {"type": "number"}, "description": "Face embedding vector."},
                "face_id":    {"type": "string", "description": "Unique ID assigned to this face."},
                "box":        {"type": "array", "items": {"type": "number"}, "description": "Bounding box of the face (often same as bbox_xyxy)."}, # 실제 데이터에 맞게 조정
                "score":      {"type": "number", "description": "Quality score of the face embedding."} # 실제 데이터에 맞게 조정
                # ... 그 외 필요한 얼굴 관련 메타데이터 ...
              },
              "required": ["bbox_xyxy", "confidence", "label", "embedding", "face_id", "box", "score"] # 필수 키 (예시)
            }
          }
        },
        "required": ["box_xyxy", "confidence", "class_id", "class_name", "detected_face_crop"] # 필수 키 (예시)
      }
    }
  },
  "required": ["image_name", "image_path", "image_hash", "detected_obj"] # 필수 키 (예시)
}

# 참고: 이 구조체 자체는 JSON 파일이 아닙니다. Python 코드에서 구조를 명시하는 용도입니다.
# 실제 JSON 스키마 정의에는 JSON Schema 표준을 따르는 것이 일반적이지만,
# 마루님의 경우는 코드 내에서 가이드로 사용하는 것이므로 위와 같은 Python dict 형태도 충분합니다.
